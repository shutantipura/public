import matplotlib.pyplot as plt
import numpy as np
import random
omega = 1
(delta,gamma,timestep,iterations,realizations) = (0, 0.1*omega, (1/100)*(1/omega), 6283, 1000)
(r00, r01, r10, r11) = (1,0,0,0) #density matrix at t=0, initial conditions
excitedpop = [] # ratio of excited population to total population

# RK4
# format of a is a = (r00,r01,r10,r11)
def dr11dtf(a):
    return complex(-(gamma)*a[3]  ,(omega/2)*(a[2]-a[1]))
def dr01dtf(a):
    return complex(-(gamma/2)*a[1],(omega/2)*(a[0]-a[3]))
def dr00dtf(a):
    return complex((gamma)*a[3]  ,-(omega/2)*(a[2]-a[1]))
def dr10dtf(a):
    return complex(-(gamma/2)*a[1],-(omega/2)*(a[0]-a[3]))

halfh = timestep/2 #useful quantity for rk4
sixh = timestep/6 #also useful quantity for rk4

excitedpoprk4 = []
[r00,r01,r10,r11] = [1,0,0,0]
main = [1,0,0,0]

for t in range(iterations):
    a = main[:]
    k1 = [dr00dtf(a),dr01dtf(a),dr10dtf(a),dr11dtf(a)]
    a[0]+=k1[0]*halfh; a[1]+=k1[1]*halfh; a[2]+=k1[2]*halfh; a[3]+=k1[3]*halfh
    k2 = [dr00dtf(a),dr01dtf(a),dr10dtf(a),dr11dtf(a)]
    a = main[:]
    a[0]+=k2[0]*halfh; a[1]+=k2[1]*halfh; a[2]+=k2[2]*halfh; a[3]+=k2[3]*halfh
    k3 = [dr00dtf(a),dr01dtf(a),dr10dtf(a),dr11dtf(a)]
    a = main[:]
    a[0]+=k3[0]*timestep; a[1]+=k3[1]*timestep; a[2]+=k3[2]*timestep; a[3]+=k3[3]*timestep
    k4 = [dr00dtf(a),dr01dtf(a),dr10dtf(a),dr11dtf(a)]
    for i in range(4):
        main[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])*sixh
    excitedpoprk4.append(np.abs(main[3])/(np.abs(main[3])+np.abs(main[0])))

# Analytical method
excitedpopana = []
sinecoef = (3*gamma)/np.sqrt(16*omega**2-gamma**2)
frontfactor = (omega**2)/(2*(omega**2)+gamma**2)

for t in range(iterations):
    bothcoef = (np.exp(-3*gamma*t*timestep/4))
    argument = np.sqrt(omega**2 - gamma**2/16)*t*timestep
    r11ana = frontfactor*(1-bothcoef*(np.cos(argument)+sinecoef*np.sin(argument)))
    excitedpopana.append(r11ana)

# Monte Carlo Method
(a,b) = (1,0)

average = np.zeros(iterations,dtype = 'double')
for r in range (0,realizations):
    (a,b) = (1,0)
    for i in range (0,iterations):
        average[i] += np.conj(b)*b
        da = (1/2j)*timestep*(a*delta+b*omega)
        db = (1/2j)*timestep*(a*omega-b*delta-b*gamma*1j)
        a += da; b += db

        norm = np.conj(a)*a + np.conj(b)*b # normsquared of the updated wavefunction
        if norm <= random.random() :
            (a,b) = (1,0)
        else:
            a /= np.sqrt(norm); b /= np.sqrt(norm)

excitedpopmc = average/realizations
rk4res = np.array(excitedpoprk4) - np.array(excitedpopana)
mcres = np.array(excitedpopmc) - np.array(excitedpopana)

#plotting

fig = plt.figure(figsize = [16,9])
fig.subplots_adjust(hspace=0)
ax1 = fig.add_subplot(3, 1, 1)
ax2 = fig.add_subplot(3, 1, 2, sharex = ax1)
ax3 = fig.add_subplot(3, 1, 3)

pos1 = ax1.get_position() # get the original position 
pos2 = [pos1.x0, pos1.y0,  pos1.width , pos1.height*2] 
ax1.set_position(pos2)

pos1 = ax2.get_position() # get the original position 
pos2 = [pos1.x0, pos1.y0,  pos1.width , pos1.height] 
ax3.set_position(pos2)

pos1 = ax3.get_position() # get the original position 
pos2 = [pos1.x0, pos1.y0 - 0.3,  pos1.width , pos1.height] 
ax3.set_position(pos2)

ax1.xaxis.tick_top()

ax1.plot(range(iterations),excitedpopana, label = 'Analytic',color = 'green')
ax1.plot(range(iterations),excitedpoprk4, label = 'RK4',color = 'red')
ax1.plot(range(iterations),average/realizations,label = 'Monte Carlo',color = 'blue')
ax1.legend()

ax2.plot(range(iterations),rk4res, label = 'RK4', color = 'red')
ax2.plot(range(iterations),mcres, label = 'Monte Carlo', color = 'blue')

ax3.hist(rk4res,color = 'red',alpha = 0.5)
ax3.hist(mcres,color='blue', alpha = 0.5)

ax1.set_ylabel('Ratio of Population in the excited state')
ax2.set_ylabel('Residuals')
ax3.set_ylabel('Frequency')
ax2.set_xlabel('Time (1/100th of Rabi Frequency)')
ax3.set_xlabel('Residuals')

plt.show()
